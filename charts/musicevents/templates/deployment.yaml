apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "musicevents.fullname" . }}
  labels:
    {{- include "musicevents.labels" . | nindent 4 }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "musicevents.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "musicevents.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "musicevents.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      initContainers:
        - name: wait-for-db
          image: busybox
          command: ['sh', '-c', 'until nc -z {{ include "musicevents.fullname" . }}-postgres 5432; do echo waiting for postgres; sleep 2; done;']
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          env:
            - name: TICKETMASTER_API_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ include "musicevents.fullname" . }}
                  key: ticketmaster-api-key
            - name: DJANGO_SECRET_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ include "musicevents.fullname" . }}
                  key: django-secret-key
            - name: DJANGO_DEBUG
              value: {{ .Values.djangoDebug | quote }}
            - name: DJANGO_ALLOWED_HOSTS
              value: {{ .Values.domain | quote }}
            - name: SPOTIFY_CLIENT_ID
              valueFrom:
                secretKeyRef:
                  name: {{ include "musicevents.fullname" . }}
                  key: spotify-client-id
            - name: SPOTIFY_CLIENT_SECRET
              valueFrom:
                secretKeyRef:
                  name: {{ include "musicevents.fullname" . }}
                  key: spotify-client-secret
            - name: DJANGO_SETTINGS_MODULE
              value: {{ .Values.djangoSettingsModule | quote }}
            - name: DJANGO_SECURE_SSL_REDIRECT
              value: {{ .Values.djangoSecureSslRedirect | quote }}
            - name: CORS_ALLOWED_ORIGINS
              value: {{ .Values.corsAllowedOrigins | default (printf "https://%s" .Values.domain) | quote }}
            - name: ALLOWED_HOSTS
              value: {{ .Values.domain | quote }}
              
            # Database configuration
            - name: DATABASE_URL
              valueFrom:
                secretKeyRef:
                  name: {{ include "musicevents.fullname" . }}
                  key: database-url
              
            # Admin configuration
            - name: ADMIN_USERNAME
              valueFrom:
                secretKeyRef:
                  name: {{ include "musicevents.fullname" . }}
                  key: admin-username
            - name: ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "musicevents.fullname" . }}
                  key: admin-password
            - name: ADMIN_EMAIL
              valueFrom:
                secretKeyRef:
                  name: {{ include "musicevents.fullname" . }}
                  key: admin-email
          ports:
            - name: http
              containerPort: 8000
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /health/
              port: http
            initialDelaySeconds: 30
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /health/
              port: http
            initialDelaySeconds: 5
            periodSeconds: 5
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          volumeMounts:
            - name: media
              mountPath: /app/media
          command:
            - /bin/bash
            - -c
            - |
              /.venv/bin/python3 manage.py migrate --noinput
              /.venv/bin/python3 manage.py collectstatic --noinput
              /.venv/bin/python3 manage.py ensure_admin
              gunicorn music_events_project.wsgi:application --bind 0.0.0.0:8000 --workers 3 --threads 4 --timeout 30 --preload --log-level debug --enable-stdio-inheritance --capture-output --access-logfile -
      volumes:
        - name: media
          {{- if .Values.persistence.enabled }}
          persistentVolumeClaim:
            claimName: {{ include "musicevents.fullname" . }}-media
          {{- else }}
          emptyDir: {}
          {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
