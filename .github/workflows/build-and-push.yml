name: Build and Push Multi-Architecture Container and Helm Charts

on:
  push:
    branches: [ main ]
    tags:
      - 'v*'
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: mangelajo/music-events
  CHART_REGISTRY: ghcr.io/mangelajo/charts

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      SHA_TAG: ${{ steps.save-tag.outputs.SHA_TAG }}
      VERSION: ${{ steps.get_version.outputs.VERSION }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Get version
        id: get_version
        run: |
          if [[ $GITHUB_REF == refs/tags/v* ]]; then
            VERSION=${GITHUB_REF#refs/tags/v}
          elif [[ $GITHUB_REF == refs/heads/main ]]; then
            TIMESTAMP=$(date +%s)
            VERSION="0.0.0-main-${TIMESTAMP}"
          else
            VERSION=$(git rev-parse --short HEAD)
          fi
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "Determined version: $VERSION"

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        
      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=sha,format=short
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=${{ steps.get_version.outputs.VERSION }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Containerfile.prod
          push: true
          platforms: linux/amd64,linux/arm64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          
      - name: Save image tag for Helm chart
        id: save-tag
        run: |
          # Extract the SHA tag
          SHA_TAG=$(echo "${{ steps.meta.outputs.tags }}" | grep -o "sha-[a-f0-9]*" | head -1)
          echo "SHA_TAG=${SHA_TAG}" >> $GITHUB_OUTPUT
          echo "SHA_TAG=${SHA_TAG}" >> $GITHUB_ENV
          
  push-helm-charts:
    runs-on: ubuntu-latest
    needs: build-and-push
    permissions:
      contents: read
      packages: write
    env:
      SHA_TAG: ${{ needs.build-and-push.outputs.SHA_TAG }}
      VERSION: ${{ needs.build-and-push.outputs.VERSION }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
        
      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: 'latest'
          
      - name: Configure Git
        run: |
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor }}@users.noreply.github.com"
          
      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Update Chart Version and Package
        run: |
          # Update Chart.yaml with the version
          sed -i "s/version: 0.1.0/version: ${{ env.VERSION }}/" ./charts/musicevents/Chart.yaml
          sed -i "s/appVersion: \"1.0.0\"/appVersion: \"${{ env.VERSION }}\"/" ./charts/musicevents/Chart.yaml
          
          # Update the Helm chart with the latest image tag
          if [ -n "${{ needs.build-and-push.outputs.SHA_TAG }}" ]; then
            sed -i "s/tag: latest/tag: ${{ needs.build-and-push.outputs.SHA_TAG }}/g" ./charts/musicevents/values.yaml
            echo "Updated Helm chart to use image tag: ${{ needs.build-and-push.outputs.SHA_TAG }}"
          else
            echo "No SHA tag found, using default tag"
          fi
          
          # Create directory for chart packages
          mkdir -p .cr-release-packages
          
          # Package the chart
          helm package ./charts/musicevents --destination .cr-release-packages
          
          # Push to OCI registry
          helm push .cr-release-packages/musicevents-${{ env.VERSION }}.tgz oci://${{ env.CHART_REGISTRY }}
